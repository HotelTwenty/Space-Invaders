import turtle
import os
import math
import random
import pygame

#Set up the screen.
wn = turtle.Screen()
wn.bgcolor("black") #sets the background colour.
wn.title("Space Invaders")
#Everything up until here, let's the game run but it will not respond. Its normal
wn.bgpic("spacebackground.gif")

#Register the shapes
turtle.register_shape("invader3.gif")
turtle.register_shape("player3.gif")

#Draw a border around play screen.
border_pen = turtle.Turtle()
border_pen.speed(0) #0 is the fastest drawing speed.
border_pen.color("white")
border_pen.penup()
#2 lines below send the pen to the left bottom position.
border_pen.setposition(-300, -300)
border_pen.pendown()
border_pen.pensize(3)
#This for loop tells the pen to make 4 moves. 2 of each.
for side in range(4):
    border_pen.fd(600) #Forwar, in the directio it faces.
    border_pen.lt(90) #Then turn 90 degrees after every 600.
border_pen.hideturtle()                  

#Set score to 0.
score = 0

#Draw score
score_pen = turtle.Turtle()
score_pen.speed(0)
score_pen.color("white")
score_pen.penup()
score_pen.setposition(-290, 280)
scorestring ="Score: %s" %score
score_pen.write(scorestring, False, align="left", font=("Arial", 14, "normal"))
score_pen.hideturtle()

#Create the palayer turtle
player = turtle.Turtle()
player.color("blue")
player.shape("player3.gif")
player.penup()
player.speed(0)
player.setposition(0, -250)
player.setheading(90)

playerspeed = 15

#Chose number of enemies
number_of_enemies = 5

#Create an empty list of enemies
enemies = []

#Add enemies to the list
for i in range(number_of_enemies):
    #Create the enemy(actual)
    enemies.append(turtle.Turtle())

for enemy in enemies:
    enemy.color("red")
    enemy.shape("invader3.gif")
    enemy.penup()
    enemy.speed(0)
    x = random.randint(-200, 200)
    y = random.randint(100, 250)
    enemy.setposition(x, y)#Makes sure they all start at different spots.
     
enemyspeed = 2

#Create player bullet
bullet = turtle.Turtle()
bullet.color("yellow")
bullet.shape("triangle")
bullet.penup()
bullet.speed()
bullet.setheading(90)
bullet.shapesize(0.5, 0.5)
bullet.hideturtle()
bullet.hideturtle()
bulletspeed = 20

#Define bullet states
#ready - ready to fire
#Fire - Bbullet is firing.
bulletstate = "ready"

#Functions needed to move left and right and binded to keys.
def move_left():
    x = player.xcor() #This fetches/reads the current position of the player.
    x -= playerspeed # Subtracts speed from current speed in order to move it to the new postion. 
    if x < -280: #This if condition makes sure the player cannot move beyond the border.
        x = -280
    player.setx(x) #Then this sets the new postion for x.

def move_right():
    x = player.xcor()
    x += playerspeed
    if x > 280: #This if condition makes sure the player cannot move beyond the border.
        x = 280
    player.setx(x)


def fire_bullet():
    #Declare bulletstate as a global if it needs to be changed.
    global bulletstate
    if bulletstate == "ready":
        bulletstate = "fire"
        #Move bulet just above the player.
        x = player.xcor()
        y = player.ycor() + 10
        bullet.setposition(x, y)
        bullet.showturtle()

def isCollision(t1, t2):
    distance = math.sqrt(math.pow(t1.xcor() - t2.xcor(),2) + math.pow(t1.ycor() - t2.ycor(),2))
    if distance < 15:
        return True
    else:
        return False


#Create the key bindings.
turtle.listen()
turtle.onkey(move_left, "Left") #Onkey methd calls the move_left function we created above, and tells it to do this when "Left" key is pressed.
turtle.onkey(move_right, "Right")
turtle.onkey(fire_bullet, "space")

#Main game loop
while True: #This loop nulifies the "Press enter to finish." command.
    #Here we had a for loop within the main game loop so all the enemies move and have the collision check.
    for enemy in enemies:
        #Move enemy
        x = enemy.xcor()
        x += enemyspeed
        enemy.setx(x)

        #Move the enemy back and down.
        #replace "enemies" with "e" in the loops. "enemy" only moves one of them.
        if enemy.xcor() > 280: 
            for e in enemies:
                y = e.ycor()
                y -= 40
                e.sety(y)
            enemyspeed *= -1

        if enemy.xcor() < -280:
            for e in enemies:
                y = e.ycor()
                y -= 40
                e.sety(y)
            enemyspeed *= -1
        #Check for collision between bullet and enemy.
        if isCollision(bullet, enemy):
            #Reset bullet.
            bullet.hideturtle()
            bulletstate = "ready"
            bullet.setposition(0, -400)
            #Reste the enemy
            x = random.randint(-200, 200)
            y = random.randint(100, 250)
            enemy.setposition(x, y)
            #Update score
            score += 10
            scorestring = "Score: %s" %score
            score_pen.clear() #This clears current score so the updated one does not print ontop of the old one.
            score_pen.write(scorestring, False, align="left", font=("Arial", 14, "normal"))

        if isCollision(player, enemy):
            player.hideturtle()
            enemy.hideturtle()
            print("Game Over")
            break


     #Move the bullet
    if bulletstate == "fire":
        y = bullet.ycor()
        y += bulletspeed
        bullet.sety(y) 

    #Check to see if if bullet has touched the top border.
    if bullet.ycor() > 275:
        bullet.hideturtle()
        bulletstate = "ready"

    
delay = input("Press Enter to finish.")
